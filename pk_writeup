    For each behavior, describe the problem at a high-level.  Include any relevant diagrams that help explain your approach.  Discuss your strategy at a high-level and include any tricky decisions that had to be made to realize a successful implementation.
    
    For the finite state controller, what was the overall behavior.  What were the states? What did the robot do in each state? How did you combine and how did you detect when to transition between behaviors?  Consider including a state transition diagram in your writeup.
    
    How was your code structured?  Make sure to include a sufficient detail about the object-oriented structure you used for your project.
    

    What if any challenges did you face along the way? 
    
    What would you do to improve your project if you had more time? 
    
    What are the key takeaways from this assignment for future robotic programming projects?

    ###########

    For the wall follower, we aimed for our robot to smoothly and consistently track a wall through the hallway. In order to do this, we decided to use a combination of our LIDAR and proportional control. We took LIDAR measurements at two different places along the wall at 45 degrees to the front and to the back of the robot. We then used proportional control to keep the two distances the same, while doing the same to keep the robot at a constant distance from the wall. 

    For steps we used to build this program, we first started by measuring exactly 2 points at 45 degrees in front of and behind the robot. [do equation] The equation proportionally accounts for a difference between the two measurements. Once we got this working, we realized that sometimes the LIDAR would miss single points, and decided to take an average of points to reduce the chance of error. This was simple, and we just averaged out the distances from all the points.

    Our code is structured with a wallFollower class, which has different functions to accomplish the various tasks needed to wall-follow. The seperate functions were organized into the three categories of "sense, think, act." The processLaser function subscribes to the LaserScan topic and sorts the data to remove noise, select the correct points, and average the data. It returns data to the doMath function, which acts as the think part of the robot.

    The doMath function simply computes the rotational velocity required to balance out the front and back points, and the rotational velocity required to keep the robot at the correct distance from the wall. The run function takes the two velocities, adds them together, and then publishes a movement command in the form of a twist message to the "cmd_vel" topic.

    